<powershell>

function Install-Chocolatey {
    Set-ExecutionPolicy Bypass -Scope Process -Force;
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

    choco feature enable -n allowGlobalConfirmation
}

function Install-AutoLogin {
    # get the password generated by Terraform from the SSM parameter store
    $password = (Get-SSMParameter -WithDecryption $true -Name '${password_ssm_parameter}').Value
    net user Administrator "$password"

    # ensure that the automatic login module is installed before setting it up
    Install-Module -Name DSCR_AutoLogon -Force
    Import-Module -Name DSCR_AutoLogon

    # actually setup automatic login and ensure that the password is the generated one
    $regPath = "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
    [microsoft.win32.registry]::SetValue($regPath, "AutoAdminLogon", "1")
    [microsoft.win32.registry]::SetValue($regPath, "DefaultUserName", "Administrator")
    Remove-ItemProperty -Path $regPath -Name "DefaultPassword" -ErrorAction SilentlyContinue
    (New-Object PInvoke.LSAUtil.LSAutil -ArgumentList "DefaultPassword").SetSecret($password)
}

<#
Ensure that Chocolatey is installed so that we can get our hands on
the AWS tools for PowerShell.

We need AWS tools for PowerShell so that we can setup the Administrator
password in this script and allow auto-login (for convenience) without
having to copy and paste the password manually from the Terraform output.
#>

Install-Chocolatey
Install-PackageProvider -Name NuGet -Force
choco install awstools.powershell

Install-AutoLogin

</powershell>
